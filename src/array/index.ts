//–ó–∞–¥–∞—á–∏ –Ω–∞ –º–∞—Å—Å–∏–≤—ã
// 1Ô∏è‚É£ –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç –≤—Ç–æ—Ä–æ–π –ø–æ –≤–µ–ª–∏—á–∏–Ω–µ —ç–ª–µ–º–µ–Ω—Ç –≤ –º–∞—Å—Å–∏–≤–µ.
// 2Ô∏è‚É£ –†–µ–∞–ª–∏–∑—É–π —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –º–∞—Å—Å–∏–≤ –¥—É–±–ª–∏–∫–∞—Ç—ã.


const func = (arr: number[]): number => {
    arr.sort((a: number, b: number) => b - a);

    return arr[1];
}

const arr: number[] = [2, 4, 1, 0];
console.log(func(arr));



const func2 = (arr: number[]): boolean => {
    arr.sort((a: number, b: number) => b - a);

    for (let i = 0; i < arr.length - 1; i++) {
        if(arr[i] === arr[i+1]){
            return true
        }
    }
    return false
}

const arr2: number[] = [2, 4, 1, 0, 2, 1, -1];
console.log(func2(arr2));


//1Ô∏è‚É£ –£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã –∏–∑ –º–∞—Å—Å–∏–≤–∞ (–±–µ–∑ Set)
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —É–¥–∞–ª—è–µ—Ç –≤—Å–µ –¥—É–±–ª–∏–∫–∞—Ç—ã –∏–∑ –º–∞—Å—Å–∏–≤–∞, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Set.


const func3 = (arr: number[]): number[] => {
    arr.sort((a: number, b: number) => b - a);

    const result: number[] = [];

    for (let i = 0; i < arr.length; i++) {
        if (i === 0 || arr[i] !== arr[i - 1]) {
            result.push(arr[i]);
        }
    }

    return result;
}

const arr3: number[] = [2, 4, 1, 0, 2, 1, -1];
console.log(func3(arr3));


// 2Ô∏è‚É£ **–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–∞—Å—Å–∏–≤ –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –¥—Ä—É–≥–æ–≥–æ –º–∞—Å—Å–∏–≤–∞**
//    *–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–¥–∏–Ω –º–∞—Å—Å–∏–≤ –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –¥—Ä—É–≥–æ–≥–æ.*
//    ```typescript
//    isSubset([1, 2, 3], [1, 2]); // true
//    isSubset([1, 2, 3], [1, 4]); // false
//    ```

const isSubsetTypeScript = (arr: number[], arr2: number[]): boolean => {
    const newSet = new Set(arr);
    return arr2.every(element => newSet.has(element))
}

const isSubset = (arr, arr2) => {
    const newSet = new Set(arr);
    return arr2.every(element => newSet.has(element));
}

console.log(isSubset([1, 2, 3], [1, 2]));
console.log(isSubset([1, 2, 3], [1, 4]));


isSubset([1, 2, 3], [1, 2]);
isSubset([1, 2, 3], [1, 4]);

//
// 3Ô∏è‚É£ **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–¥–º–∞—Å—Å–∏–≤–∞ (Kadane's Algorithm)**
//    *–ù–∞–π—Ç–∏ –ø–æ–¥–º–∞—Å—Å–∏–≤ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º–æ–π.*
//    ```typescript
//    maxSubarraySum([-2,1,-3,4,-1,2,1,-5,4]); // 6 (–ø–æ–¥–º–∞—Å—Å–∏–≤ [4,-1,2,1])
//    ```

const maxSubarraySum = (nums: number[]): number => {
    let maxSum = nums[0];
    let currentSum = nums[0];

    for (let i = 1; i < nums.length; i++) {
        currentSum = Math.max(nums[i], currentSum + nums[i]);
        maxSum = Math.max(maxSum, currentSum);
    }

    return maxSum;
}

//
// 4Ô∏è‚É£ **–ü–æ–≤–µ—Ä–Ω—É—Ç—å –º–∞—Å—Å–∏–≤ –≤–ª–µ–≤–æ –Ω–∞ `k` —ç–ª–µ–º–µ–Ω—Ç–æ–≤**
//    *–†–µ–∞–ª–∏–∑—É–π —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å–¥–≤–∏–≥–∞–µ—Ç –º–∞—Å—Å–∏–≤ –≤–ª–µ–≤–æ –Ω–∞ `k` —ç–ª–µ–º–µ–Ω—Ç–æ–≤.*
//    ```typescript
//    rotateLeft([1, 2, 3, 4, 5], 2); // [3, 4, 5, 1, 2]
//    ```
//

const rotateLeft = <T>(arr: T[], k: number): T[] => {
    const n = arr.length;
    if (n === 0) return arr;
    k = k % n;
    return [...arr.slice(k), ...arr.slice(0, k)];
}

// 5Ô∏è‚É£ **–ù–∞–π—Ç–∏ –¥–≤–∞ —á–∏—Å–ª–∞ –≤ –º–∞—Å—Å–∏–≤–µ, —Å—É–º–º–∞ –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞–≤–Ω–∞ `target` (Two Sum)**
//    *–†–µ–∞–ª–∏–∑—É–π —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç –¥–≤–∞ —á–∏—Å–ª–∞ –≤ –º–∞—Å—Å–∏–≤–µ, –¥–∞—é—â–∏—Ö –≤ —Å—É–º–º–µ `target`.*
//    ```typescript
//    twoSum([2, 7, 11, 15], 9); // [2, 7]
//    ```

const twoSum = (arr: number[], k: number): number[] | null => {
    const map = new Map<number, number>();

    for (let num of arr) {
        const complement = k - num;
        if (map.has(complement)) {
            return [complement, num];
        }
        map.set(num, true);
    }

    return null;
};
// ---
//
// ### **üìå –ó–∞–¥–∞—á–∏ –Ω–∞ —Å—Ç—Ä–æ–∫–∏**
// 6Ô∏è‚É£ **–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º**
//    *–†–µ–∞–ª–∏–∑—É–π —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á–∏—Ç–∞–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –æ–¥–∏–Ω–∞–∫–æ–≤–æ —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ –∏ —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ.*
//    ```typescript
//    isPalindrome("racecar"); // true
//    isPalindrome("hello"); // false
//    ```

const isPalindrome = (str: string): boolean => {
    return str.toString().split("").reverse().join("") == str.toString();
};

console.log('isPalindrome?',isPalindrome("racecar"))
//
// 7Ô∏è‚É£ **–ê–Ω–∞–≥—Ä–∞–º–º—ã**
//    *–î–∞–Ω—ã –¥–≤–µ —Å—Ç—Ä–æ–∫–∏. –ü—Ä–æ–≤–µ—Ä—å, —è–≤–ª—è—é—Ç—Å—è –ª–∏ –æ–Ω–∏ –∞–Ω–∞–≥—Ä–∞–º–º–∞–º–∏ (—Å–æ—Å—Ç–æ—è—Ç –∏–∑ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –±—É–∫–≤ –≤ —Ä–∞–∑–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ).*
//    ```typescript
//    isAnagram("listen", "silent"); // true
//    isAnagram("hello", "world"); // false
//    ```
//
// 8Ô∏è‚É£ **–°–∞–º–æ–µ –¥–ª–∏–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –≤ —Å—Ç—Ä–æ–∫–µ**
//    *–†–µ–∞–ª–∏–∑—É–π —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∞–º–æ–µ –¥–ª–∏–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –≤ —Å—Ç—Ä–æ–∫–µ.*
//    ```typescript
//    longestWord("The quick brown fox jumped over the lazy dog"); // "jumped"
//    ```
//
// 9Ô∏è‚É£ **–°–∂–∞—Ç–∏–µ —Å—Ç—Ä–æ–∫–∏ (Run-Length Encoding)**
//    *–°–æ–∂–º–∏ —Å—Ç—Ä–æ–∫—É, –∑–∞–º–µ–Ω—è—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã –Ω–∞ `{—Å–∏–º–≤–æ–ª}{–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π}`.*
//    ```typescript
//    compressString("aaabbcddd"); // "a3b2c1d3"
//    ```
//
// üîü **–ü–æ–¥—Å—á–µ—Ç –≥–ª–∞—Å–Ω—ã—Ö –≤ —Å—Ç—Ä–æ–∫–µ**
//    *–†–µ–∞–ª–∏–∑—É–π —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–ª–∞—Å–Ω—ã—Ö (`a, e, i, o, u`) –≤ —Å—Ç—Ä–æ–∫–µ.*
//    ```typescript
//    countVowels("hello world"); // 3
//    ```
//
// ---
//
// –í—ã–±–∏—Ä–∞–π –ª—é–±—É—é –∑–∞–¥–∞—á—É –∏ —Ä–µ—à–∞–π! –ï—Å–ª–∏ –≥–¥–µ-—Ç–æ –∑–∞—Å—Ç—Ä—è–Ω–µ—à—å ‚Äî –ø–æ–º–æ–≥—É üí™üî•