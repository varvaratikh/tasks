// ### **üîπ –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å**
//
// **1) –°—Ç–µ–∫ (LIFO)**
// –£—Å–ª–æ–≤–∏–µ: –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Å—Ç–µ–∫ —Å –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ push –∏ pop. –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç–µ–∫ –ø—É—Å—Ç—ã–º.
// –ü—Ä–∏–º–µ—Ä:
// stack.push(10);
// stack.push(20);
// stack.pop(); // 20
// stack.pop(); // 10

const createStack = <T>() => {
    const items: T[] = [];

    return {
        push: (item: T) => {
            items.push(item);
        },
        pop: (): T | undefined => {
            return items.pop();
        },
        isEmpty: (): boolean => {
            return items.length === 0;
        },
    };
};

const stack = createStack<number>();

stack.push(10);
stack.push(20);


//
// **2) –û—á–µ—Ä–µ–¥—å (FIFO)**
// –£—Å–ª–æ–≤–∏–µ: –†–µ–∞–ª–∏–∑—É–π—Ç–µ –æ—á–µ—Ä–µ–¥—å —Å –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ enqueue –∏ dequeue. –ù–∞–ø–∏—à–∏—Ç–µ
// —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–æ–π.
// –ü—Ä–∏–º–µ—Ä:
// queue.enqueue(10);
// queue.enqueue(20);
// queue.dequeue(); // 10
// queue.dequeue(); // 20


const createQueue = <T>() =>{
    const items: T[] = [];

    return {
        enqueue(item: T) {
            items.push(item);
        },
        dequeue(): T | undefined {
            return items.shift();
        },
        isEmpty(): boolean {
            return items.length === 0;
        }
    };
}
//
// **3) –î–µ–∫ (–î–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—è—è –æ—á–µ—Ä–µ–¥—å)**
// –£—Å–ª–æ–≤–∏–µ: –†–µ–∞–ª–∏–∑—É–π—Ç–µ –¥–µ–∫ (–¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—é—é –æ—á–µ—Ä–µ–¥—å) —Å –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –æ–±–æ–∏—Ö –∫–æ–Ω—Ü–æ–≤.
// –ü—Ä–∏–º–µ—Ä:
// deque.pushFront(10);
// deque.pushBack(20);
// deque.popFront(); // 10
// deque.popBack(); // 20
//

const deq = <T>() => {
    const items: T[] = [];

    return {
        pushFront(item: T) {
            items.unshift(item);
        },

        pushBack(item: T) {
            items.push(item);
        },

        popFront(): T | undefined {
            return items.shift();
        },
        popBack(): T | undefined {
            return items.pop();
        }
    };
}


// ---
//
// ### **üîπ –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å**
//
// **4) –ú–æ–Ω–æ—Å—Ç–µ–∫**
// –£—Å–ª–æ–≤–∏–µ: –†–µ–∞–ª–∏–∑—É–π—Ç–µ –º–æ–Ω–æ—Å—Ç–µ–∫, –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞ –≤—Ä–µ–º—è O(1).
// –° –ø–æ–º–æ—â—å—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å—Ç–µ–∫–∞ —Ö—Ä–∞–Ω–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã.
// –ü—Ä–∏–º–µ—Ä:
// monostack.push(10);
// monostack.push(5);
// monostack.push(8);
// monostack.getMin(); // 5
// monostack.pop(); // 8
// monostack.getMin(); // 5
//

const monoStack = () => {
    const stack: number[] = [];
    const minStack: number[] = [];

    return {
        push(item: number) {
            stack.push(item);
            if (minStack.length === 0 || item <= minStack[minStack.length - 1]) {
                minStack.push(item);
            }
        },

        pop(): number | undefined {
            const popped = stack.pop();
            if (popped === minStack[minStack.length - 1]) {
                minStack.pop();
            }
            return popped;
        },

        getMin(): number {
            if (minStack.length === 0) {
                throw new Error("Stack is empty");
            }
            return minStack[minStack.length - 1];
        },

        peek(): number | undefined {
            return stack[stack.length - 1];
        },

        isEmpty(): boolean {
            return stack.length === 0;
        }
    };
};


// **5) –ú–æ–Ω–æ—Ç–æ–Ω–Ω–∞—è –æ—á–µ—Ä–µ–¥—å**
// –£—Å–ª–æ–≤–∏–µ: –†–µ–∞–ª–∏–∑—É–π—Ç–µ –º–æ–Ω–æ—Ç–æ–Ω–Ω—É—é –æ—á–µ—Ä–µ–¥—å, –∫–æ—Ç–æ—Ä–∞—è —Ö—Ä–∞–Ω–∏—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –ø–æ—Ä—è–¥–∫–µ –Ω–µ—É–±—ã–≤–∞–Ω–∏—è.
// –†–µ–∞–ª–∏–∑—É–π—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥—å, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫.
// –ü—Ä–∏–º–µ—Ä:
// monotonicQueue.enqueue(5);
// monotonicQueue.enqueue(3);
// monotonicQueue.enqueue(8);
// monotonicQueue.dequeue(); // 3 (—Å–∞–º—ã–π –º–∞–ª–µ–Ω—å–∫–∏–π)


const monoQueue = () => {
    const queue: number[] = [];

    return {
        enqueue(item: number) {
            while (queue.length > 0 && queue[queue.length - 1] > item) {
                queue.pop();
            }
            queue.push(item);
        },

        dequeue(): number | undefined {
            return queue.shift();
        },

        getMin(): number {
            if (queue.length === 0) {
                throw new Error("Queue is empty");
            }
            return queue[0];
        },

        peek(): number | undefined {
            return queue[0];
        },

        isEmpty(): boolean {
            return queue.length === 0;
        },

        print(): void {
            console.log(queue);
        }
    };
};

//
// ---
//
// ### **üîπ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å**
//
// **6) –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—Ç–µ–∫–∞**
// –£—Å–ª–æ–≤–∏–µ: –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º, –∏—Å–ø–æ–ª—å–∑—É—è —Å—Ç–µ–∫. –î–ª—è —ç—Ç–æ–≥–æ –≤—ã –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–µ–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤ —Å—Ç—Ä–æ–∫–∏ –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –∏—Ö —Å —Å–∏–º–≤–æ–ª–∞–º–∏ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.
// –ü—Ä–∏–º–µ—Ä:
// isPalindrome("racecar"); // true
// isPalindrome("hello"); // false
//
// **7) –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤ –æ—á–µ—Ä–µ–¥–∏**
// –£—Å–ª–æ–≤–∏–µ: –ò—Å–ø–æ–ª—å–∑—É—è –æ—á–µ—Ä–µ–¥—å, —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –ø–æ–¥–º–∞—Å—Å–∏–≤–∞ —Ä–∞–∑–º–µ—Ä–æ–º k –≤ –º–∞—Å—Å–∏–≤–µ.
// –ü—Ä–∏–º–µ—Ä:
// maxSumSubarray([1, 2, 3, 4, 5], 3); // 12 (–ø–æ–¥–º–∞—Å—Å–∏–≤ [3, 4, 5])
//
// **8) –ú–∏–Ω–∏–º—É–º –≤ –º–æ–Ω–æ—Ç–æ–Ω–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏**
// –£—Å–ª–æ–≤–∏–µ: –ò—Å–ø–æ–ª—å–∑—É—è –º–æ–Ω–æ—Ç–æ–Ω–Ω—É—é –æ—á–µ—Ä–µ–¥—å, –Ω–∞–π–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –ø–æ–¥–º–∞—Å—Å–∏–≤–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã, –¥–≤–∏–≥–∞—è—Å—å –ø–æ –º–∞—Å—Å–∏–≤—É.
// –ü—Ä–∏–º–µ—Ä:
// minInSlidingWindow([4, 3, 1, 7, 2, 5], 3); // [1, 1, 1, 2]
//
// ---
