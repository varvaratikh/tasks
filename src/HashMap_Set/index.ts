//üîπ –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
// 1) –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
// –£—Å–ª–æ–≤–∏–µ: –í–µ—Ä–Ω—É—Ç—å true, –µ—Å–ª–∏ –≤ –º–∞—Å—Å–∏–≤–µ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è —ç–ª–µ–º–µ–Ω—Ç.
// –¢–∏–ø: Set, –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
// –ü—Ä–∏–º–µ—Ä: [1,2,3,1] ‚Üí true


const checkForDuplicates = (arr: number[]) : boolean => {
    const unique = new Set(arr);

    return unique.size !== arr.length;
}

// 2) –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–∞–≥—Ä–∞–º–º
// –£—Å–ª–æ–≤–∏–µ: –Ø–≤–ª—è—é—Ç—Å—è –ª–∏ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏ –∞–Ω–∞–≥—Ä–∞–º–º–∞–º–∏ –¥—Ä—É–≥ –¥—Ä—É–≥–∞?
// –¢–∏–ø: HashMap –∏–ª–∏ Array[26] –¥–ª—è —á–∞—Å—Ç–æ—Ç —Å–∏–º–≤–æ–ª–æ–≤
// –ü—Ä–∏–º–µ—Ä: "listen", "silent" ‚Üí true


const isAnagram = (str1: string, str2: string): boolean => {
    if (str1.length !== str2.length) return false;

    const charCount = new Map<string, number>();

    for (const char of str1) {
        charCount.set(char, (charCount.get(char) || 0) + 1);
    }

    for (const char of str2) {
        if (!charCount.has(char)) return false;
        charCount.set(char, charCount.get(char)! - 1);
        if (charCount.get(char)! < 0) return false;
    }

    return true;
}




// 3)–ß–∞—Å—Ç–æ—Ç–∞ —Å–∏–º–≤–æ–ª–æ–≤
// –£—Å–ª–æ–≤–∏–µ: –í–µ—Ä–Ω–∏ –º–∞–ø—É —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤—Ö–æ–∂–¥–µ–Ω–∏–π –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –≤ —Å—Ç—Ä–æ–∫—É.
// –ü—Ä–∏–º–µ—Ä: "aabbc" ‚Üí {a: 2, b: 2, c: 1}

const frequency = (str: string): Map<string, number> => {

    const charCount = new Map<string, number>();

    for (const char of str) {
        charCount.set(char, (charCount.get(char) || 0) + 1);
    }

    return charCount;
}

// üîπ –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å
// –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –¥–≤—É—Ö –º–∞—Å—Å–∏–≤–æ–≤
// –£—Å–ª–æ–≤–∏–µ: –í–µ—Ä–Ω–∏ –º–∞—Å—Å–∏–≤ –∏–∑ –æ–±—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (—É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö) –¥–≤—É—Ö –≤—Ö–æ–¥–Ω—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤.
// –¢–∏–ø: Set
// –ü—Ä–∏–º–µ—Ä: [1,2,2,1], [2,2] ‚Üí [2]


const intersection = (arr: number[], arr2: number[]): number[] => {
    const common = arr.filter(el => arr2.includes(el));

    return [...new Set(common)];
}

// –î–≤–∞ —á–∏—Å–ª–∞ –¥–∞—é—Ç —Å—É–º–º—É (Two Sum)
// –£—Å–ª–æ–≤–∏–µ: –ï—Å—Ç—å –ª–∏ –¥–≤–∞ —á–∏—Å–ª–∞ –≤ –º–∞—Å—Å–∏–≤–µ, —Å—É–º–º–∞ –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞–≤–Ω–∞ target?
// –¢–∏–ø: HashMap (–∫–ª—é—á ‚Äî —á–∏—Å–ª–æ, –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –∏–Ω–¥–µ–∫—Å)
// –ü—Ä–∏–º–µ—Ä: [2,7,11,15], target=9 ‚Üí true (2 + 7)


function hasTwoSum(nums: number[], target: number): boolean {
    const map = new Map<number, number>();

    for (let i = 0; i < nums.length; i++) {
        const complement = target - nums[i];
        if (map.has(complement)) {
            return true;
        }
        map.set(nums[i], i);
    }

    return false;
}




// –ù–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–π —ç–ª–µ–º–µ–Ω—Ç (Mode)
// –£—Å–ª–æ–≤–∏–µ: –í–µ—Ä–Ω–∏ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —á–∞—â–µ –≤—Å–µ–≥–æ.
// –ü—Ä–∏–º–µ—Ä: [1,3,1,3,2,1] ‚Üí 1

const frequentElement = (arr: number[]): number => {
    const map = new Map<number, number>();

    for (let num of arr) {
        map.set(num, (map.get(num) || 0) + 1);
    }

    let maxCount = 0;
    let mostFrequent = arr[0];

    for (let [key, value] of map.entries()) {
        if (value > maxCount) {
            maxCount = value;
            mostFrequent = key;
        }
    }

    return mostFrequent;
};




// üîπ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å
// –ü–æ–¥–º–∞—Å—Å–∏–≤ —Å —Å—É–º–º–æ–π 0
// –£—Å–ª–æ–≤–∏–µ: –ï—Å—Ç—å –ª–∏ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –ø–æ–¥–º–∞—Å—Å–∏–≤ —Å —Å—É–º–º–æ–π 0?
// –ò–¥–µ—è: –ü—Ä–µ—Ñ–∏–∫—Å–Ω—ã–µ —Å—É–º–º—ã + Set
// –ü—Ä–∏–º–µ—Ä: [1, 2, -3, 4] ‚Üí true

const zeroSum = (arr: number[]) : boolean => {

    return false
}





// –°–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
// –£—Å–ª–æ–≤–∏–µ: –ù–∞–π–¥–∏ –¥–ª–∏–Ω—É —Å–∞–º–æ–π –¥–ª–∏–Ω–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ –Ω–µ–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –º–∞—Å—Å–∏–≤–µ.
// –¢–∏–ø: Set, –Ω–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å!
// –ü—Ä–∏–º–µ—Ä: [100, 4, 200, 1, 3, 2] ‚Üí 4 (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 1,2,3,4)
// –ü–æ–¥—Å—Ç—Ä–æ–∫–∞ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–∏–º–≤–æ–ª–æ–≤
// –£—Å–ª–æ–≤–∏–µ: –ù–∞–π–¥–∏ –¥–ª–∏–Ω—É —Å–∞–º–æ–π –¥–ª–∏–Ω–Ω–æ–π –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤.
// –¢–∏–ø: Set + Sliding Window
// –ü—Ä–∏–º–µ—Ä: "abcabcbb" ‚Üí 3 (abc)